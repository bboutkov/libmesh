/*! \mainpage MetaPhysicL: Metaprogramming Library for Physics calculations

<b>Version \version</b>, Build Date: \builddate
<br><br>
Built by: \builduser on \buildhost
<hr>

\section overview Overview

MetaPhysicL is a set of template classes and metaprogramming tools
useful for the generation of physics codes which are optimized at
compile-time.

This includes many classes which are designed to be compatible with
generic codes written for plain numeric data types like float and
double, but which may provide more featureful output:

DualNumber, for automatic differentiation. 

NumberArray, for vectorization.

SparseNumberArray and SparseNumberStruct, for homogeneous or
heterogeneous sparse vectors whose structure can be inferred at
compile time.

EquationSet, for the automatic assembly of physics equations into
evaluation codes.

Thanks for your interest in MetaPhysicL.  To aid in usage, this manual is
further divided into the following subsections:

<ul>
<li> \subpage installation
<li> \subpage inputFile
<!-- <li> <a href="http://buildbot.ices.utexas.edu/docs/buildbot/hpct/build/docs/html/lcov/build/src/index.html">Buildbot Coverage</a> -->
</ul>

\section bugs Reporting Bugs

Bugs in the code and errors or omissions in the documentation can be
reported to roystgnr@ices.utexas.edu.  Requests and contributions are
welcome at the same e-mail address.  All bug reports should include:
<ul>

<li>the version number of MetaPhysicL (versioning information can
be obtained by running the <B><code>metaphysicl_version</code></B> binary located in the
bin/ directory of a local MetaPhysicL installation),
<li>the hardware and operating system,
<li>the local compiler version number,
<li>a description of the bug behavior, and ideally, 
<li>a short program which reproduces the bug.
</ul>

\section licence License
Copyright (C) 2013 The PECOS Development Team
\copydoc LicenseLGPL

\section acknowledgements Acknowledgments
\copydoc Acknowledgments

\section pecos-center More Information About PECOS
\copydoc About

*/

/*! \page installation Installation/Linkage

MetaPhysicL uses the GNU autotools suite (autoconf, automake, and libtool)
for its development build system.  This system is popular among the
Linux development community and provides a familiar build environment
for end users.  

To build MetaPhysicL starting from a release distribution, untar the distribution and
enter the top-level directory.

<div class="fragment"><pre class="fragment">
 > tar xvfz metaphysicl-$(VERSION).tar.gz
 > cd metaphysicl-$(VERSION)/            
</pre></div>

<b>Installation Directory</b>: Use the <tt>--prefix</tt> option to
specify your desired top-level installation directory for MetaPhysicL.

<h2> Other Configuration Options </h2>

Configure help can also be accessed at the command line:

\code> ./configure --help \endcode

<h2> Library Build </h2>

Once configured, issue a <tt>make</tt> to build the software. If successful, this
will build MetaPhysicL (static and dynamic libraries and executables).

\code > make \endcode

If you have multiple cores at your disposal, a parallel buid can accelerate
the build time. If there are 4 cores avaiable, then the following will build
using 4 threads, thereby leveraging 4 processors.

\code > make -j 4\endcode

<b> Verifying the build:</b> To verify that the software is working
properly, a test option is provided to run a short suite of
functionality tests against the local build.  To run, issue a <tt>make
check</tt> to run the tests. Note that these tests may take a few minutes
depending upon optimization level and architecture.  

<h2> Installation </h2>

After the build is complete, issue a <tt>make install</tt> to install
MetaPhysicL. This will install the header files, libraries, executables,
and examples.  
The installation will consist of four top-level
directories housing the library, include files, executables, and
example files.  An example of the top-level directories after
installation is shown below:

\code > make install \endcode

Top-level MetaPhysicL installation directory:

\code
 > ls $HOME/bin/metaphysicl/
 bin  examples  include  lib
\endcode

<h2>Library Linkage</h2>

To link an external application with the library, the \c include
directory must be added to the compilers include search path in order
to access the necessary header files.  The \c lib directory should
also be added to the linker search path along with a request to link
against the MetaPhysicL library.  Several example link steps are
provided below.  These examples assume that the MetaPhysicL library has
been successfully built and installed previously in the users's
~/bin/metaphysicl directory:

\code > $(CXX) -I$HOME/bin/metaphysicl/include app.c \
         -L$HOME/bin/metaphysicl/lib -lmetaphysicl \endcode

To embed the dynamic library search path for the MetaPhysicL library
directly into the application executable, use an additional linker
option as follows:

\code > $(CXX) -I$HOME/bin/metaphysicl/include app.c -L$HOME/bin/metaphysicl/lib \
         -Wl,-rpath,$HOME/bin/metaphysicl/lib -lmetaphysicl \endcode

*/


